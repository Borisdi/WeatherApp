
@model WeatherApi3.Models.AllWeatherModel;

<!doctype html>
<html lang="en">
<head>
    <!--Required meta tag-->
    <meta charset="utf-8">
    <!--Responsive meta tag-->
    <meta name="viewport" , content="width=device-width, initial-scale=1.0, shrink-to-fit=no" />

    <link rel="stylesheet" type="text/css" href="~/css/site.css?version=4">
    <link rel="stylesheet" type="text/css" href="~/css/weather-icons.css">
    <link rel="stylesheet" type="text/css" href="~/css/weather-icons-wind.css">
    <!--Bootstrap-->
    <link href="~/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
</head>
<body>
    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>

    <!--<script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
    <script src="bootstrap/js/bootstrap.min.js"></script> -->
    <!--Method for receiving the user`s geolocation(returns coordinated)-->
    <script>
        var coordinates = document.getElementById("coordinates");
        function getLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(onGetCoordinates, showError);
            } else {
                coordinates.innerHTML = "Geolocation is not supported by this browser.";
            }
        }
        function onGetCoordinates(position) {
            $.ajax({
                url: '@Url.Action("GetCurrentConditionsAndForecast", "OpenWeatherMapMvc")',
                type:"GET",
                dataType: "html",
                data: { latitude: position.coords.latitude, longitude: position.coords.longitude },
                success: function (data) {
                    $('#currentconditions').html(data);
                },
            });
        }
        getLocation();
        function showError(error) {
            switch (error.code) {
                case error.PERMISSION_DENIED:
                    x.innerHTML = "User denied the request for Geolocation."
                    break;
                case error.POSITION_UNAVAILABLE:
                    x.innerHTML = "Location information is unavailable."
                    break;
                case error.TIMEOUT:
                    x.innerHTML = "The request to get user location timed out."
                    break;
                case error.UNKNOWN_ERROR:
                    x.innerHTML = "An unknown error occurred."
                    break;
            }
        }
         function onClickGetAnalysis() {
            $.ajax({
                url: '@Url.Action("_Analysis", "OpenWeatherMapMvc")',
                success: function () {
                    $('.maincontent').html(maincontent);
                },
            });
        }
        function openForecastTab(evt, forecastType) {
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }
            document.getElementById(forecastType).style.display = "block";
            evt.currentTarget.className += " active";
        }
    </script>
    <div class="maincontent">
        <nav class="navbar navbar-expand-md navbar-dark bg-dark">
            <a class="navbar-brand" href="#">Всичко за времето</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav ml-auto">
                    <li class="nav-item active">
                        <a class="nav-link" href="@Url.Action("Index","OpenWeatherMapMvc")">Начало</a>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" id="navbarDropdown" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false" href="#">Прогнози</a>
                        <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                            <a class="dropdown-item" href="@Url.Action("GetAnalysis","OpenWeatherMapMvc")">Анализ</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item" href="#">Планини</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item" href="#">Крайбрежие</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item" href="#">Сезонни</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item" href="#">Агрокултурна</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item" href="#">Астрономическа</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item" href="#">Летни курорти</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item" href="#">Зимни курорти</a>
                        </div>
                    </li>
                    <li class="nav-item active">
                        <a class="nav-link" href="#">Климат</a>
                    </li>
                    <li class="nav-item active">
                        <a class="nav-link" href="#">За медии</a>
                    </li>
                    <li class="nav-item active">
                        <a class="nav-link" href="#">За Нас</a>
                    </li>
                    <li class="nav-item active">
                        <a class="nav-link" href="#">Контакти</a>
                </ul>
            </div>
        </nav>
    </div>
    <div class="tab">
        <button class="tablinks" onclick="openForecastTab(event, 'twoweeks')">14-дневна</button>
        <button class="tablinks" onclick="openForecastTab(event, '96hours')">По часове - 96 часа напред</button>
        <button class="tablinks" onclick="openForecastTab(event, 'uvforecast')">UV</button>
    </div>

    <div id="currentconditions">
        @await Html.PartialAsync("_CurrentLocationConditions", Model.CurrentWeatherConditions)
    </div>
    <div id="twoweeks" class="tabcontent">
        <p>
            <div id="forecastbox">
                @{
                    var forecast = Model.Forecast;
                    @*<div id="forecast">14 дневна прогноза за @forecast.city.name </div>*@
                foreach (var details in forecast.ForecastDetails)
                {
                    <div class="CurrentCityForecast">
                        <div class="DateAndTimeForecast">
                            @{  var culture = new System.Globalization.CultureInfo("bg-BG");
                                string format = "ddd d/M HH:mm";
                                var day = DateTime.Parse(details.Date).ToString(format);                                
                             }@day

                        </div>
                        <div class="weatherdescriptionForecast">
                            <img id="imageweathersymbol" class="img-responsive" src=@Url.Content(GetImage(details.Id)) />
                        </div>
                        <div class="weatherdescriptionforecast">@details.Description</div>
                        <div>
                            <div class="tempForecast">Temperature: @Math.Round(details.Temperature) °C</div>
                            <div class="cloudsForecast">Clouds: @details.Clouds %</div>
                            <div class="rainForecast">
                                Rain:
                                @{
                                    double rain = 0;
                                    if (details.Rain.HasValue)
                                    {
                                        rain = Math.Round(details.Rain.Value);
                                    }                                  
                                } @rain mm
                            </div>
                            <div class="winddirectionForecast">
                                @{
                                    var (directiondescriptionForecast, windCssClassForecast) = GetWindDirection(details.WindDegree);
                                }
                                Direction: @directiondescriptionForecast
                                <i class="@windCssClassForecast"></i>
                            </div>
                            <div class="windspeedForecast">Wind speed: @Math.Round(details.WindSpeed) m/s</div>
                            <div class="pressureForecast">Pressure: @details.Pressure hPa</div>
                        </div>
                    </div>
                    }
                }
            </div>
        </p>
    </div>
    <div id="uvforecast" class="tabcontent">
        <p>
            <div id="UVDescription">
                UV Прогноза за @forecast.City
                @{for (int l = 0; l < Model.UVIndexForecast.Count; l++)
                    {
                        var uVforecast = Model.UVIndexForecast[l];
                        <div id="dateUV">
                            Date:
                            @uVforecast.Date
                        </div>
                        <div id="UVIndex">UV: @Math.Round(uVforecast.Value) </div>
                    }
                }
            </div>
        </p>
    </div>
    <a id="sattellite-image" href='http://en.sat24.com/en' target='sat24'><img class="img-responsive" id="sattellite" src='https://api.sat24.com/animated/SE/visual/1/GTB%20Standard%20Time/7072957' width=400 height=300 /></a>
</body>
</html>
@functions {
    public string GetImage(int? id)
    {
        String image = null;
        switch (id)
        {
            case 800:
                image = "~/images/Symbols/01d.png";
                break;
            case 801:
                image = "~/images/Symbols/02d.png";
                break;
            case 802:
                image = "~/images/Symbols/02d.png";
                break;
            case 803:
            case 804:
                image = "~/images/Symbols/04d.png";
                break;
            // Всички събития от група 3xx - ръмеж и дъжд
            case 300:
            case 301:
            case 302:
            case 310:
            case 311:
            case 312:
            case 313:
            case 314:
            case 321:
                image = "~/images/Symbols/09d.png";
                break;
            // Всички събития от група 5xx - дъждове с различна интензивност
            case 500:
            case 501:
            case 502:
            case 503:
            case 504:
            case 511:
            case 520:
            case 521:
            case 522:
            case 531:
                image = "~/images/Symbols/10d.png";
                break;
            // Всички събития от група 2xx - гръмотевична буря
            case 200:
            case 201:
            case 202:
            case 210:
            case 211:
            case 212:
            case 221:
            case 230:
            case 231:
            case 232:
                image = "~/images/Symbols/11d.png";
                break;
            // Всички събития от група 6xx - снеговалеж с различна интензивност
            case 600:
            case 601:
            case 602:
            case 611:
            case 612:
            case 615:
            case 616:
            case 620:
            case 621:
            case 622:
                image = "~/images/Symbols/13d.png";
                break;
            // Всички събития от група 7xx - атмосферни явления
            case 701:
            case 711:
            case 721:
            case 731:
            case 741:
            case 751:
            case 761:
            case 762:
            case 771:
            case 781:
                image = "~/images/Symbols/50d.png";
                break;
            default:
                break;
        }
        return image;
    }

    public Tuple<string, string> GetWindDirection(double degree)
    {
        string description = "";
        string cssClass = "";
        if (degree >= 0 && degree < 11 || degree <= 0 && degree > 349)
        {
            description = "N";
            cssClass = "wi wi-wind wi-towards-s";
        }
        if (degree >= 11 && degree< 34)
        {
            description = "NNE";
            cssClass = "wi wi-wind wi-towards-ssw";
        }
        if (degree >= 34 && degree< 56)
        {
            description = "NE";
            cssClass = "wi wi-wind wi-towards-sw";
        }
        if (degree >= 56 && degree< 79)
        {
            description = "ENE";
            cssClass = "wi wi-wind wi-towards-wsw";
        }
        if (degree >= 79 && degree< 101)
        {
            description = "E";
            cssClass = "wi wi-wind wi-towards-w";
        }
        if (degree >= 101 && degree< 124)
        {
            description = "ESE";
            cssClass="wi wi-wind wi-towards-ene";
        }
        if (degree >= 124 && degree< 146)
        {
            description = "SE";
            cssClass="wi wi-wind wi-towards-nw";
        }
        if (degree >= 146 && degree< 169)
        {
            description = "SSE";
            cssClass="wi wi-wind wi-towards-nnw";
        }
        if (degree >= 169 && degree< 191)
        {
            description = "S";
            cssClass="wi wi-wind wi-towards-n";
        }
        if (degree >= 191 && degree< 214)
        {
            description = "SSW";
            cssClass="wi wi-wind wi-towards-nne";
        }
        if (degree >= 214 && degree< 236)
        {
            description = "SW";
            cssClass="wi wi-wind wi-towards-ne";
        }
        if (degree >= 236 && degree< 259)
        {
            description = "WSW";
            cssClass="wi wi-wind wi-towards-ene";
        }
        if (degree >= 259 && degree< 281)
        {
            description = "W";
            cssClass="wi wi-wind wi-towards-e";
        }
        if (degree >= 281 && degree< 304)
        {
            description = "WNW";
            cssClass="wi wi-wind wi-towards-ese";
        }
        if (degree >= 304 && degree< 326)
        {
            description = "NW";
            cssClass="wi wi-wind wi-towards-sw";
        }
        if (degree >= 326 && degree< 349)
        {
            description = "NNW";
            cssClass="wi wi-wind wi-towards-ssw";
        }

        return new Tuple<string, string>(description, cssClass);
    }
}